#!KAMAILIO

#!define SIP_PORT 5080
#!define MET "my_app.sip."
#!define WITH_PGSQL
#!define WITH_USRLOCDB
#!define DBURL "postgres://postgres:admin@localhost:5432/kamailio"
#!define DBSQLURL "usrloc=>postgres://postgres:admin@localhost:5432/kamailio"

####### Global Parameters #########

/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=2
log_stderror=yes
memdbg=5
memlog=5
log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "
children=2
disable_tcp=no
auto_aliases=no
server_header="Server: Kamailio"
server_signature=no
dns=no
dns_cache_init=off
dns_srv_lb=no
dns_try_naptr=no
rev_dns=no
use_dns_cache=no
tos=0x60
tcp_connection_lifetime=3605
tcp_max_connections=2048
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384
socket_workers=1
async_workers=1
max_while_loops=1000
maxbuffer=65536
mhomed=0
tcp_accept_no_cl=yes
#!ifdef WITH_TLS
enable_tls=yes
tls_max_connections=2048
#!endif

#!ifdef WITH_TLS
listen=tls:PRIVATE_IP:SIP_PORT
#!else
listen=tcp:PRIVATE_IP:SIP_PORT
listen=udp:PRIVATE_IP:SIP_PORT
#!endif

####### Modules Section ########

mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif
loadmodule "xhttp.so"
loadmodule "outbound.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "counters.so"
loadmodule "nathelper.so"
loadmodule "stun.so"
loadmodule "htable.so"
loadmodule "tcpops.so"
loadmodule "statsd.so"
loadmodule "jsonrpcs.so"
loadmodule "jansson.so"
loadmodule "timer.so"
loadmodule "dialog.so"
#!ifdef WITH_PGSQL
loadmodule "db_postgres.so"
loadmodule "sqlops.so"
#!endif
#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- ctl params -----
# modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ----- sanity params -----
modparam("sanity", "autodrop", 0)

# ----- jsonrpcs params -----
modparam("jsonrpcs", "transport", 7)
modparam("jsonrpcs", "pretty_format", 1)
# modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
# modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")

# ----- htable params -----
modparam("htable", "htable", "ipban=>size=8;autoexpire=900;")

#!ifdef WITH_PGSQL
# ----- postgres params -----
modparam("db_postgres", "con_param", "host=localhost;port=5432;user=postgres;password=admin;dbname=kamailio")
#!endif

#!ifdef WITH_AUTH
# ----- auth params -----
modparam("auth", "nonce_count", 1)
modparam("auth", "qop", "auth")
modparam("auth", "nonce_expire", 60)
modparam("auth", "nonce_auth_max_drift", 2)
modparam("auth", "auth_checks_register", 11)
modparam("auth", "auth_checks_no_dlg", 9)
modparam("auth", "auth_checks_in_dlg", 15)

# ----- auth_db params -----
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

#!ifdef WITH_IPAUTH
# ----- permissions params -----
modparam("permissions", "db_url", DBURL)
modparam("permissions", "load_backends", 1)
#!endif
#!endif

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
# modparam("registrar", "append_branches", 0)
modparam("registrar", "max_contacts", 5)
modparam("registrar", "max_expires", 60)
modparam("registrar", "default_expires", 60)
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 0)

# ----- usrloc params -----
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", 0)
modparam("usrloc", "close_expired_tcp", 1)
modparam("usrloc", "handle_lost_tcp", 1)
modparam("usrloc", "server_id_filter", 0)
modparam("usrloc", "db_insert_update", 1)
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 1)
modparam("sqlops", "sqlcon", DBSQLURL)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

# ----- metrics params -----
modparam("statsd", "ip", "127.0.0.1")
modparam("statsd", "port", "8125")

# report metrics every 10 sec
modparam("timer", "declare_timer", "metrics_timer=METRICS,10000,slow,enable");

# make sure calls do not timeout too soon
modparam("dialog", "default_timeout", 86400);
modparam("dialog", "early_timeout", 180);
modparam("dialog", "noack_timeout", 60);
modparam("dialog", "end_timeout", 60);
modparam("dialog", "db_mode", 0);

####### Routing Logic ########

request_route {
	xinfo("from $fU [$si:$sp] to [$tu]\n");
#!ifdef WITH_TLS
	if (proto == TLS && is_peer_verified()) {
		xinfo("TLS peer certificate - $tls_peer_serial\n");
	}
#!endif

	# count all incoming requests
	statsd_incr(MET + "request." + $rm);

	# per request initial checks
	route(REQINIT);

	# NAT detectionis_peer_verified()
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# SIP dialogs
	route(WITHINDLG);

	# authentication
	# route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}

	# handle registrations
	route(REGISTRAR);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484", "Address Incomplete");
		exit;
	}

	# user location service
	route(LOCATION);

	return;
}

# Per SIP request initial checks
route[REQINIT] {
	# no connect for sending replies
	set_reply_no_connect();
	# enforce symmetric signaling
	# - send back replies to the source address of request
	force_rport();

	if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent|pplsip") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483", "Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200", "Keepalive");
		exit;
	}

	if(!sanity_check("17895", "7")) {
		xlog("Malformed SIP request from $si:$sp\n");
		exit;
	}
}

# Caller NAT detection
route[NATDETECT] {
	if (is_method("INVITE|PRACK|NOTIFY|REFER|REGISTER|UPDATE|BYE") && $ct != $null) {
        if (!set_contact_alias()) {
            xlog("L_WARN", "[R-NAT][$ci]: Could not add contact alias [$rm] - [$rs] [$Rp]\n");
        }
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) {
		return;
	}

	# sequential request within a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}

	sl_send_reply("404", "Not here");
	exit;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH
#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address()) {
		# source IP allowed
		return;
	}
#!endif
	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403", "Not relaying");
		exit;
	}
#!else
	# authentication not enabled - do not relay at all to foreign networks
	if(uri!=myself) {
		sl_send_reply("403", "Not relaying");
		exit;
	}
#!endif
	return;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (!is_method("REGISTER")) {
		return;
	}

	# measure location update latency
	statsd_start(MET + "sql_time.save_location");
	if (!save("location")) {
		sl_reply_error();
	}
	statsd_stop(MET + "sql_time.save_location");
	exit;
}

# User location service
route[LOCATION] {
	# find out whether caller has PBX (proxy) configured
	$var(usr_pbx) = 0;
	sql_pvquery(
		"usrloc",
		"select sip_ep from usr_pbx where usr = '$fU' limit 1",
		"$var(usr_pbx)"
	);
	xinfo("fetched pbx - $var(usr_pbx)\n");

	if ($var(usr_pbx) == 0) {
		t_newtran();
		send_reply("403", "Forbidden");
		exit;
	}

	if ($var(usr_pbx) == "skip") {
		# SIP from PBX: send SIP to remote or local client socket
		if (!route(FORWARD)) {
			if (!lookup("location")) {
				t_newtran();
				send_reply("404", "User Not Found");
				exit;
			}
		}
	} else {
		# SIP from softphone
		$var(username) = $rU;
		$ru = $var(usr_pbx);

		# send SIP to remote or local PBX socket
		if (!route(FORWARD)) {
			if (!lookup("location", "$var(usr_pbx)")) {
				t_newtran();
				send_reply("404", "Gateway Not Found");
				exit;
			}

			# reuse local PBX connection
			handle_ruri_alias();
		}

		# regardless of where to SIP is sent, ensure it reaches target user
		$rU = $var(username);
	}

	xinfo("relaying $ru -> $du\n");
	route(RELAY);
	exit;
}

route[FORWARD] {
	# find out to what proxy request user is connected
	xinfo("fetching socket location for $rU\n");
	$var(target_socket) = 0;
	sql_pvquery(
		"usrloc",
		"select socket from location where username = '$rU' limit 1",
		"$var(target_socket)"
	);
	xinfo("fetched socket - $var(target_socket)\n");

	if ($var(target_socket) == 0) {
		t_newtran();
		send_reply("404", "User Not Found");
		exit;
	}

	$var(target_socket) = $(var(target_socket){s.strip, 4});

	# if its connected to remote proxy, forward SIP there
	if ($var(target_socket) != ("PRIVATE_IP:" + SIP_PORT)) {
		xinfo("$rU is remote client\n");
		$ru = "sip:" + $rU + "@" + $var(target_socket);
		xinfo("forwarding to $ru\n");
		return(1);
	} else {
		xinfo("$rU is local client\n");
		return(-1);
	}
}

# Wrapper for relaying requests
route[RELAY] {
	# enable additional event routes for forwarded requests
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	# dialogs tracking
	dlg_manage();

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

route[METRICS] {
	xinfo("collecting metrics:\n");

	# report active calls
	xinfo("dialogs active: $stat(active_dialogs)\n");
	xinfo("dialogs ringing: $stat(early_dialogs)\n");

	statsd_gauge(MET + "active_dialogs", $stat(active_dialogs));
	statsd_gauge(MET + "early_dialogs", $stat(early_dialogs));

	# report opened connections
	if (
		jsonrpc_exec('{"jsonrpc": "2.0", "method": "core.tcp_info"}') &&
		$jsonrpl(code) == 200
	) {
		jansson_get("result.opened_connections", $jsonrpl(body), "$var(tcp_open)");
		jansson_get("result.opened_tls_connections", $jsonrpl(body), "$var(tls_open)");

		xinfo("TCP open: $var(tcp_open)\n");
		xinfo("TLS open: $var(tls_open)\n");

		statsd_gauge(MET + "tcp_open", $var(tcp_open));
		statsd_gauge(MET + "tls_open", $var(tls_open));
	} else {
		xerr("failed to fetch open connections stats\n");
	}

	# report shared memory stats
	if (
		jsonrpc_exec('{"jsonrpc": "2.0", "method": "core.shmmem"}') &&
		$jsonrpl(code) == 200
	) {
		jansson_get("result.free", $jsonrpl(body), "$var(shm_free)");
		jansson_get("result.used", $jsonrpl(body), "$var(shm_used)");

		xinfo("shared memory free: $var(shm_free)\n");
		xinfo("shared memory used: $var(shm_used)\n");

		statsd_gauge(MET + "shmmem_free", $var(shm_free));
		statsd_gauge(MET + "shmmem_used", $var(shm_used));
	} else {
		xerr("failed to fetch shared memory stats\n");
	}

	# report private memory stats
	if (
		jsonrpc_exec('{"jsonrpc": "2.0", "method": "pkg.stats"}') &&
		$jsonrpl(code) == 200
	) {
		$var(pkg_free) = 0;
		$var(pkg_used) = 0;
		$var(i) = 0;

		jansson_array_size("result", $jsonrpl(body), "$var(pkg_size)");
		while($var(i) < $var(pkg_size)) {
			jansson_get("result[$var(i)].free", $jsonrpl(body), "$var(p_f)");
			jansson_get("result[$var(i)].used", $jsonrpl(body), "$var(p_u)");
			$var(pkg_free) = $var(pkg_free) + $var(p_f);
			$var(pkg_used) = $var(pkg_used) + $var(p_u);
			$var(i) = $var(i) + 1;
		}

		xinfo("private memory free: $var(pkg_free)\n");
		xinfo("private memory used: $var(pkg_used)\n");

		statsd_gauge(MET + "pkgmem_free", $var(pkg_free));
		statsd_gauge(MET + "pkgmem_used", $var(pkg_used));
	} else {
		xerr("failed to fetch private memory stats\n");
	}
}

event_route[dialog:failed] {
	xinfo("dialogs failed: +1\n");
	# this will show a short spike on chart
	statsd_gauge(MET + "failed_dialogs", "+1");
}

# Manage incoming replies
reply_route {
	if(!sanity_check("17604", "6")) {
		xlog("Malformed SIP response from $si:$sp\n");
		drop;
	}
	return;
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	if (t_is_canceled()) {
		exit;
	}

#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404", "Not found");
		exit;
	}
#!endif

#!ifdef WITH_BLOCK401407
	# block call redirect based on 401, 407 replies.
	if (t_check_status("401|407")) {
		t_reply("404", "Not found");
		exit;
	}
#!endif
	return;
}

# JSONRPC over HTTP(S) routing
event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();
	
	if(src_ip != 127.0.0.1) {
		xhttp_reply(
			"403",
			"Forbidden",
			"text/html",
			"<html><body>Not allowed from $si</body></html>"
		);
		exit;
	}

	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
		exit;
	}

	if ($hu =~ "^/terminate") {
		sql_xquery(
			"usrloc",
			"select ruid, username, connection_id, socket from location",
			"cs"
		);

		$var(i) = 0;
		while($xavp(cs[$var(i)]=>ruid) != $null) {
			$var(username) = $(xavp(cs[$var(i)]=>username));
			$var(conid) = $xavp(cs[$var(i)]=>connection_id);
			$var(socket) = $(xavp(cs[$var(i)]=>socket));
			$var(socket) = $(var(socket){s.strip, 4});
			$var(ruid) = $xavp(cs[$var(i)]=>ruid);

			if ($var(socket) == ("PRIVATE_IP:" + SIP_PORT)) {
				xinfo("disconnecting - $var(username)\n");
				if ($var(conid) > 0) {
					if (!tcp_close_connection("$var(conid)")) {
						xerr("failed to close\n");
					} else {
						xinfo("closed connection\n");
					}
				}
			} else {
				xinfo("ignoring - $var(username)\n");
			}

			$var(i) = $var(i) + 1;
		}

		xhttp_reply(
			"200",
			"OK",
			"text/html",
			"<html><body>OK</body></html>"
		);
		exit;
	}

	xhttp_reply(
		"200",
		"OK",
		"text/html",
		"<html><body>Wrong URL $hu</body></html>"
	);
    exit;
}
